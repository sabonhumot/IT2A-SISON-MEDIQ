/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package patient;

import careq.*;
import config.connectDB;
import config.session;
import doctor.doctorDashB;
import gfx.RoundedPanel;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.Graphics2D;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

/**
 *
 * @author Administrator
 */
public class patientDashB extends javax.swing.JFrame {

    Color mainColor = new Color(37, 171, 241);
    Color hoverColor = new Color(31, 128, 179);

    Color logoutColor = new Color(100, 188, 234);
    Color hoverlogoutColor = new Color(250, 249, 246);
    
    boolean hasAppointmentsToday = false;
    boolean hasAppointmentsTomorrow = false;

    public patientDashB() {
        initComponents();
        loadOpenSans();
        accountInformation();
        showAppointmentsToday();
        showAppointmentsTomorrow();
        noAppointments();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainbg = new javax.swing.JPanel();
        dboard = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        dboardBG = new RoundedPanel(15);
        welcome = new javax.swing.JLabel();
        upc = new javax.swing.JLabel();
        noAppPanel = new javax.swing.JPanel();
        noApp = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        schedToday = new javax.swing.JPanel();
        patientPfp = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        schedTime = new javax.swing.JLabel();
        schedDate = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        upc1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        noToday = new javax.swing.JLabel();
        schedTomorrow = new javax.swing.JPanel();
        patientPfp1 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        schedTime1 = new javax.swing.JLabel();
        schedDate1 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        upc2 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        noTomorrow = new javax.swing.JLabel();
        jPanel1 = new RoundedPanel(5);
        dashboardPanel = new RoundedPanel(50);
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        logoutPanel = new RoundedPanel(25);
        jLabel7 = new javax.swing.JLabel();
        logout = new javax.swing.JLabel();
        bookAppointment = new RoundedPanel(50);
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        profilePanel = new RoundedPanel(50);
        jLabel16 = new javax.swing.JLabel();
        profile = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainbg.setBackground(new java.awt.Color(245, 245, 245));
        mainbg.setMinimumSize(new java.awt.Dimension(1017, 620));
        mainbg.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dboard.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(250, 249, 246));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setText("Patient Dashboard");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 300, -1));

        dboard.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 910, 70));

        dboardBG.setBackground(new java.awt.Color(250, 249, 246));
        dboardBG.setLayout(null);

        welcome.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        welcome.setText("Welcome ");
        dboardBG.add(welcome);
        welcome.setBounds(20, 20, 390, 50);

        upc.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        upc.setText("Upcoming appointments");
        dboardBG.add(upc);
        upc.setBounds(20, 100, 330, 50);

        noAppPanel.setBackground(new java.awt.Color(250, 249, 246));
        noAppPanel.setLayout(null);

        noApp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/no-appointment.png"))); // NOI18N
        noAppPanel.add(noApp);
        noApp.setBounds(110, 10, 110, 140);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 153, 153));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("No appointments scheduled");
        noAppPanel.add(jLabel6);
        jLabel6.setBounds(40, 150, 240, 22);

        dboardBG.add(noAppPanel);
        noAppPanel.setBounds(250, 260, 310, 200);

        schedToday.setBackground(new java.awt.Color(250, 249, 246));
        schedToday.setLayout(null);
        schedToday.add(patientPfp);
        patientPfp.setBounds(20, 40, 80, 70);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel9.setText("Doctor Name");
        schedToday.add(jLabel9);
        jLabel9.setBounds(110, 70, 210, 40);

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/date.png"))); // NOI18N
        schedToday.add(jLabel10);
        jLabel10.setBounds(510, 80, 30, 30);

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/time.png"))); // NOI18N
        schedToday.add(jLabel11);
        jLabel11.setBounds(510, 40, 30, 30);

        schedTime.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        schedTime.setText("Scheduled Time");
        schedToday.add(schedTime);
        schedTime.setBounds(540, 40, 150, 30);

        schedDate.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        schedDate.setText("Schedule Date");
        schedToday.add(schedDate);
        schedDate.setBounds(540, 80, 170, 30);

        jLabel12.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel12.setText("Appointed Doctor");
        schedToday.add(jLabel12);
        jLabel12.setBounds(110, 40, 180, 20);

        upc1.setFont(new java.awt.Font("Trebuchet MS", 1, 16)); // NOI18N
        upc1.setText("Today");
        schedToday.add(upc1);
        upc1.setBounds(10, 0, 120, 50);
        schedToday.add(jSeparator1);
        jSeparator1.setBounds(0, 0, 770, 160);

        noToday.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        noToday.setForeground(new java.awt.Color(102, 102, 102));
        noToday.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        noToday.setText("No Appointments Today");
        schedToday.add(noToday);
        noToday.setBounds(240, 60, 270, 40);

        dboardBG.add(schedToday);
        schedToday.setBounds(50, 140, 770, 160);

        schedTomorrow.setBackground(new java.awt.Color(250, 249, 246));
        schedTomorrow.setLayout(null);
        schedTomorrow.add(patientPfp1);
        patientPfp1.setBounds(20, 40, 80, 70);

        jLabel13.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel13.setText("Doctor Name");
        schedTomorrow.add(jLabel13);
        jLabel13.setBounds(110, 70, 210, 40);

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/date.png"))); // NOI18N
        schedTomorrow.add(jLabel14);
        jLabel14.setBounds(510, 90, 30, 30);

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/time.png"))); // NOI18N
        schedTomorrow.add(jLabel15);
        jLabel15.setBounds(510, 50, 30, 30);

        schedTime1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        schedTime1.setText("Scheduled Time");
        schedTomorrow.add(schedTime1);
        schedTime1.setBounds(540, 50, 150, 30);

        schedDate1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        schedDate1.setText("Schedule Date");
        schedTomorrow.add(schedDate1);
        schedDate1.setBounds(540, 90, 170, 30);

        jLabel17.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel17.setText("Appointed Doctor");
        schedTomorrow.add(jLabel17);
        jLabel17.setBounds(110, 40, 270, 20);

        upc2.setFont(new java.awt.Font("Trebuchet MS", 1, 16)); // NOI18N
        upc2.setText("Tomorrow");
        schedTomorrow.add(upc2);
        upc2.setBounds(10, 0, 120, 50);
        schedTomorrow.add(jSeparator3);
        jSeparator3.setBounds(0, 0, 770, 160);

        noTomorrow.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        noTomorrow.setForeground(new java.awt.Color(102, 102, 102));
        noTomorrow.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        noTomorrow.setText("No Appointments Today");
        schedTomorrow.add(noTomorrow);
        noTomorrow.setBounds(240, 70, 270, 40);

        dboardBG.add(schedTomorrow);
        schedTomorrow.setBounds(50, 340, 770, 160);

        dboard.add(dboardBG, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 860, 590));

        mainbg.add(dboard, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 0, 910, 700));

        jPanel1.setBackground(new java.awt.Color(37, 171, 241));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dashboardPanel.setBackground(new java.awt.Color(37, 171, 241));
        dashboardPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        dashboardPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dashboardPanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                dashboardPanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                dashboardPanelMouseExited(evt);
            }
        });
        dashboardPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/dashboard_filled.png"))); // NOI18N
        dashboardPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 40, 50));

        jLabel2.setForeground(new java.awt.Color(250, 249, 246));
        jLabel2.setText("Dashboard");
        dashboardPanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 10, 110, 30));

        jPanel1.add(dashboardPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 190, 50));

        logoutPanel.setBackground(new java.awt.Color(100, 188, 234));
        logoutPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logoutPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutPanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                logoutPanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                logoutPanelMouseExited(evt);
            }
        });
        logoutPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/log-out.png"))); // NOI18N
        logoutPanel.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 30, 50));

        logout.setBackground(new java.awt.Color(73, 138, 172));
        logout.setForeground(new java.awt.Color(73, 138, 172));
        logout.setText("Logout");
        logout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logoutPanel.add(logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, 30));

        jPanel1.add(logoutPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 600, 170, 70));

        bookAppointment.setBackground(new java.awt.Color(37, 171, 241));
        bookAppointment.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bookAppointment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookAppointmentMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bookAppointmentMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bookAppointmentMouseExited(evt);
            }
        });
        bookAppointment.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/appointment-filled.png"))); // NOI18N
        bookAppointment.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 40, 50));

        jLabel4.setForeground(new java.awt.Color(250, 249, 246));
        jLabel4.setText("Appointments");
        bookAppointment.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 10, 110, 30));

        jPanel1.add(bookAppointment, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 220, 190, 50));

        profilePanel.setBackground(new java.awt.Color(37, 171, 241));
        profilePanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        profilePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                profilePanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                profilePanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                profilePanelMouseExited(evt);
            }
        });
        profilePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/profile-white.png"))); // NOI18N
        jLabel16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel16MouseEntered(evt);
            }
        });
        profilePanel.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 50, 50));

        profile.setForeground(new java.awt.Color(250, 249, 246));
        profile.setText("Profile");
        profilePanel.add(profile, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 0, 100, 50));

        jPanel1.add(profilePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 430, 190, -1));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logo.png"))); // NOI18N
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        mainbg.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 190, 700));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainbg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainbg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void noAppointments() {
        if (!hasAppointmentsToday && !hasAppointmentsTomorrow) {
            noAppPanel.setVisible(false);
        } else {
            noAppPanel.setVisible(true);
        }
    }

    private void showAppointmentsTomorrow() {
        try {
            // Debug log
            System.out.println("Starting showAppointmentsTomorrow method");

            session sess = session.getInstance();
            connectDB conn = new connectDB();
            String doctorName = ("Dr. " + sess.getFirstName() + " " + sess.getLastName());

            // Format tomorrow's date to match your database text format
            LocalDate tomorrowDate = LocalDate.now().plusDays(1);
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            String tomorrow = tomorrowDate.format(formatter);

            // Debug log
            System.out.println("Tomorrow's date (formatted): " + tomorrow);
            System.out.println("Doctor name: " + doctorName);

            // Query for tomorrow's appointments with exact string comparison
            String query = "SELECT a.appointment_id, CONCAT('Dr. ', u.u_fname, ' ', u.u_lname) AS doctor_name, "
                    + "a.date, a.time, u.u_pfp, a.appointment_status "
                    + "FROM appointments a "
                    + "JOIN user u ON a.doctor_id = u.u_id "
                    + "WHERE a.patient_id = '" + sess.getU_id() + "' AND a.date = '" + tomorrow + "' AND a.appointment_status = 'Accepted'";

            // Debug log
            System.out.println("Query: " + query);

            ResultSet rs = conn.getData(query);

            // Debug log
            System.out.println("ResultSet obtained: " + (rs != null));

            // Count the total appointments and store the first one
            boolean hasAppointments = false;
            String firstDoctor = "";
            String firstDate = "";
            String firstTime = "";
            String firstPfp = "";
            int totalAppointments = 0;

            while (rs != null && rs.next()) {
                totalAppointments++;

                // Debug log for each appointment found
                System.out.println("Found appointment #" + totalAppointments);
                System.out.println("Date in DB: " + rs.getString("a.date"));

                // Store the first appointment details
                if (totalAppointments == 1) {
                    hasAppointments = true;
                    firstDoctor = rs.getString("doctor_name");
                    firstDate = rs.getString("a.date");
                    firstTime = rs.getString("a.time");
                    firstPfp = rs.getString("u.u_pfp");

                    // Debug log
                    System.out.println("First appointment: " + firstDoctor + " on " + firstDate + " at " + firstTime);
                }
            }

            // Debug log
            System.out.println("Total tomorrow appointments: " + totalAppointments);
            System.out.println("Has appointments: " + hasAppointments);

            // Set panel visibility based on appointments
            if (hasAppointments) {
                // Update tomorrow's panel UI with the first appointment
                jLabel13.setText(firstDoctor);
                schedTime1.setText(firstTime);
                schedDate1.setText(firstDate);

                // Set the profile picture
                if (firstPfp == null || firstPfp.trim().isEmpty()) {
                    String blankPfpPath = "src/img/blankpfp.jpg";
                    patientPfp1.setIcon(ResizeImage(blankPfpPath, null, patientPfp1));
                } else {
                    patientPfp1.setIcon(ResizeImage(firstPfp, null, patientPfp1));
                }

                schedTomorrow.setVisible(true);
                noTomorrow.setVisible(false);

            } else {

                schedTomorrow.setVisible(true);
                jLabel13.setVisible(false);
                schedTime1.setVisible(false);
                schedDate1.setVisible(false);
                patientPfp1.setVisible(false);
                jLabel14.setVisible(false);
                jLabel15.setVisible(false);
                jLabel17.setVisible(false);

            }

            // Force UI refresh
            schedTomorrow.revalidate();
            schedTomorrow.repaint();
            noAppPanel.revalidate();
            noAppPanel.repaint();

        } catch (SQLException ex) {
            System.out.println("SQL Exception in showAppointmentsTomorrow: " + ex.getMessage());
            Logger.getLogger(doctorDashB.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            System.out.println("General Exception in showAppointmentsTomorrow: " + ex.getMessage());
            ex.printStackTrace();
        }
    }

    private void showAppointmentsToday() {
        try {
            session sess = session.getInstance();
            connectDB conn = new connectDB();
            String doctorName = ("Dr. " + sess.getFirstName() + " " + sess.getLastName());
            LocalDate today = LocalDate.now();

            // Query for today's appointments
            ResultSet rs = conn.getData(
                    "SELECT a.appointment_id, CONCAT('Dr. ', u.u_fname, ' ', u.u_lname) AS doctor_name, "
                    + "a.date, a.time, u.u_pfp, a.appointment_status "
                    + "FROM appointments a "
                    + "JOIN user u ON a.doctor_id = u.u_id "
                    + "WHERE a.patient_id = '" + sess.getU_id() + "' AND a.date = '" + today + "' AND a.appointment_status = 'Accepted'"
            );

            // Count the total appointments and store the first one
            hasAppointmentsToday = false;
            String firstDoctor = "";
            String firstDate = "";
            String firstTime = "";
            String firstPfp = "";
            int totalAppointments = 0;

            while (rs.next()) {
                totalAppointments++;

                // Store the first appointment details
                if (totalAppointments == 1) {
                    hasAppointmentsToday = true;
                    firstDoctor = rs.getString("doctor_name");
                    firstDate = rs.getString("a.date");
                    firstTime = rs.getString("a.time");
                    firstPfp = rs.getString("u.u_pfp");
                }
            }

            // Show the appropriate panel based on if appointments exist
            if (hasAppointmentsToday) {
                // Update today's panel UI with the first appointment
                jLabel9.setText(firstDoctor);
                schedTime.setText(firstTime);
                schedDate.setText(firstDate);

                // Set the profile picture
                if (firstPfp == null || firstPfp.trim().isEmpty()) {
                    String blankPfpPath = "src/img/blankpfp.jpg";
                    patientPfp.setIcon(ResizeImage(blankPfpPath, null, patientPfp));
                } else {
                    patientPfp.setIcon(ResizeImage(firstPfp, null, patientPfp));
                }

                // Show additional appointment indicator if there's more than one
                schedToday.setVisible(true);
                noToday.setVisible(false);

            } else {
                schedToday.setVisible(true);
                jLabel9.setVisible(false);
                schedTime.setVisible(false);
                schedDate.setVisible(false);
                patientPfp.setVisible(false);
                jLabel10.setVisible(false);
                jLabel11.setVisible(false);
                jLabel12.setVisible(false);
            }
        } catch (SQLException ex) {
            Logger.getLogger(doctorDashB.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public ImageIcon ResizeImage(String ImagePath, byte[] pic, JLabel label) {
        try {
            BufferedImage originalImage;
            if (ImagePath != null) {
                originalImage = ImageIO.read(new File(ImagePath));
            } else {
                originalImage = ImageIO.read(new ByteArrayInputStream(pic));
            }

            int diameter = Math.min(label.getWidth(), label.getHeight());
            BufferedImage masked = new BufferedImage(diameter, diameter, BufferedImage.TYPE_INT_ARGB);

            Graphics2D g2 = masked.createGraphics();
            g2.setClip(new java.awt.geom.Ellipse2D.Float(0, 0, diameter, diameter));
            g2.drawImage(originalImage, 0, 0, diameter, diameter, null);
            g2.dispose();

            return new ImageIcon(masked);
        } catch (IOException e) {
            System.out.println("Image Load Error: " + e.getMessage());
            return null;
        }
    }
    
    
    
    private void dashboardPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dashboardPanelMouseClicked

    }//GEN-LAST:event_dashboardPanelMouseClicked

    private void dashboardPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dashboardPanelMouseEntered

        dashboardPanel.setBackground(hoverColor);
    }//GEN-LAST:event_dashboardPanelMouseEntered

    private void dashboardPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dashboardPanelMouseExited

        dashboardPanel.setBackground(mainColor);
    }//GEN-LAST:event_dashboardPanelMouseExited

    private void logoutPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutPanelMouseClicked

        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to log out?", "Logout", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            session userSession = session.getInstance();

            userSession.setU_id(null);
            userSession.setFirstName(null);
            userSession.setLastName(null);
            userSession.setEmail(null);
            userSession.setUsername(null);
            userSession.setAcc_type(null);
            userSession.setAcc_status(null);

            logIn lg = new logIn();
            lg.setVisible(true);
            this.dispose();

        }
    }//GEN-LAST:event_logoutPanelMouseClicked

    private void logoutPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutPanelMouseEntered
        logoutPanel.setBackground(hoverlogoutColor);
    }//GEN-LAST:event_logoutPanelMouseEntered

    private void logoutPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutPanelMouseExited
        logoutPanel.setBackground(logoutColor);
    }//GEN-LAST:event_logoutPanelMouseExited

    private void bookAppointmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookAppointmentMouseClicked

        patientAppointments pApp = new patientAppointments();
        pApp.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_bookAppointmentMouseClicked

    private void bookAppointmentMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookAppointmentMouseEntered

        bookAppointment.setBackground(hoverColor);

    }//GEN-LAST:event_bookAppointmentMouseEntered

    private void bookAppointmentMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookAppointmentMouseExited
        bookAppointment.setBackground(hoverColor);
    }//GEN-LAST:event_bookAppointmentMouseExited

    private void jLabel16MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel16MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel16MouseEntered

    private void profilePanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_profilePanelMouseClicked

        patientProfileMenu ppm = new patientProfileMenu();
        ppm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_profilePanelMouseClicked

    private void profilePanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_profilePanelMouseEntered

        profilePanel.setBackground(hoverColor);
    }//GEN-LAST:event_profilePanelMouseEntered

    private void profilePanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_profilePanelMouseExited

        profilePanel.setBackground(mainColor);
    }//GEN-LAST:event_profilePanelMouseExited

    private void accountInformation() {

        session sess = session.getInstance();

        welcome.setText("Welcome, " + sess.getFirstName() + "!");

    }

    private void loadOpenSans() {
        try {
            InputStream fontStream = getClass().getResourceAsStream("/font/OpenSans-VariableFont_wdth,wght.ttf");
            if (fontStream != null) {
                Font openSans = Font.createFont(Font.TRUETYPE_FONT, fontStream);
                GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
                ge.registerFont(openSans);
                // Now you can use the font:
                jLabel2.setFont(openSans.deriveFont(Font.BOLD, 14));
                jLabel5.setFont(openSans.deriveFont(Font.BOLD, 24));
            } else {
                System.err.println("Font file not found!");
            }
        } catch (IOException | FontFormatException e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(patientDashB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(patientDashB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(patientDashB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(patientDashB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new patientDashB().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bookAppointment;
    private javax.swing.JPanel dashboardPanel;
    private javax.swing.JPanel dboard;
    private javax.swing.JPanel dboardBG;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel logout;
    private javax.swing.JPanel logoutPanel;
    private javax.swing.JPanel mainbg;
    private javax.swing.JLabel noApp;
    private javax.swing.JPanel noAppPanel;
    private javax.swing.JLabel noToday;
    private javax.swing.JLabel noTomorrow;
    private javax.swing.JLabel patientPfp;
    private javax.swing.JLabel patientPfp1;
    private javax.swing.JLabel profile;
    private javax.swing.JPanel profilePanel;
    private javax.swing.JLabel schedDate;
    private javax.swing.JLabel schedDate1;
    private javax.swing.JLabel schedTime;
    private javax.swing.JLabel schedTime1;
    private javax.swing.JPanel schedToday;
    private javax.swing.JPanel schedTomorrow;
    private javax.swing.JLabel upc;
    private javax.swing.JLabel upc1;
    private javax.swing.JLabel upc2;
    private javax.swing.JLabel welcome;
    // End of variables declaration//GEN-END:variables
}
