/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package patient;

import config.connectDB;
import config.session;
import gfx.GradientPanel;
import gfx.RoundGradientButton;
import gfx.RoundedPanel;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import javax.swing.BorderFactory;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.text.MaskFormatter;
import gfx.RoundedTextField;
import java.security.NoSuchAlgorithmException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.HashMap;
import javax.swing.JOptionPane;

/**
 *
 * @author Administrator
 */
public class appointmentForm extends javax.swing.JFrame {

    public appointmentForm() {
        initComponents();
//        getDoctorNames();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jPanel2 = new GradientPanel(new Color(250,249, 246), new Color(227, 249, 246), 1);
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new RoundGradientButton("Sign Up", new Color(131, 164, 212), new Color(182, 251, 255), 35);
        jLabel8 = new javax.swing.JLabel();
        doctorComboBox = new javax.swing.JComboBox<>();
        jTextField1 = new RoundedTextField(15);
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        time = new RoundedTextField(15);
        jLabel10 = new javax.swing.JLabel();
        date = new RoundedTextField(15);
        doctorError = new javax.swing.JLabel();
        dateError = new javax.swing.JLabel();
        timeError = new javax.swing.JLabel();
        symptomsError = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        specialtyComboBox = new javax.swing.JComboBox<>();
        specialtyError = new javax.swing.JLabel();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel2 = new RoundedPanel(20);
        jPanel2.setBackground(new java.awt.Color(250, 249, 246));
        jPanel2.setForeground(new java.awt.Color(50, 49, 204));
        jPanel2.setMinimumSize(new java.awt.Dimension(326, 344));
        jPanel2.setPreferredSize(new java.awt.Dimension(460, 480));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 26)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Appointment Form");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 40, 230, 40));

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        jButton2.setForeground(new java.awt.Color(250, 249, 246));
        jButton2.setText("Submit");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 650, 150, 50));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/close.png"))); // NOI18N
        jLabel8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 50, 30, 30));

        doctorComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "(Select your doctor)" }));
        doctorComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                doctorComboBoxFocusLost(evt);
            }
        });
        doctorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorComboBoxActionPerformed(evt);
            }
        });
        jPanel2.add(doctorComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 220, 330, 40));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel2.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 520, 330, 100));

        jLabel6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel6.setText("Additional notes: ");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 500, 200, 20));

        jLabel7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel7.setText("Specialty");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, 180, 20));

        jLabel9.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel9.setText("Time (HH:MM):");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 400, 180, 20));

        try  {
            MaskFormatter timeFormatter = new MaskFormatter ("##:##");
            time = new JFormattedTextField(timeFormatter);
        } catch (Exception e)  {
            time = new JFormattedTextField();
        }
        time.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                timeFocusLost(evt);
            }
        });
        jPanel2.add(time, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 420, 330, 40));

        jLabel10.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel10.setText("Date (YYYY/MM/DD):");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 300, 180, 20));

        try  {
            MaskFormatter dateFormatter = new MaskFormatter("####/##/##");
            date = new JFormattedTextField(dateFormatter);
        } catch (Exception e){
            date = new JFormattedTextField();
        }
        date.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dateFocusLost(evt);
            }
        });
        jPanel2.add(date, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 320, 330, 40));
        jPanel2.add(doctorError, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 260, 200, 20));
        jPanel2.add(dateError, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 360, 200, 20));
        jPanel2.add(timeError, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 460, 210, 20));
        jPanel2.add(symptomsError, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 620, 200, 20));

        jLabel11.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel11.setText("Doctor");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 200, 180, 20));

        specialtyComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "(Select doctor specialty)", "Pediatrics", "Optomology", "Internal Medicine", "Dermatology", "Neurology", "Surgery", "Gynecology" }));
        specialtyComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                specialtyComboBoxFocusLost(evt);
            }
        });
        specialtyComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                specialtyComboBoxActionPerformed(evt);
            }
        });
        jPanel2.add(specialtyComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 120, 330, 40));
        jPanel2.add(specialtyError, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, 200, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 572, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 740, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 740, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked

        this.dispose();
    }//GEN-LAST:event_jLabel8MouseClicked

    private void getDoctorNames() {

        connectDB con = new connectDB();

        String specialty = (String) specialtyComboBox.getSelectedItem();

        try {

            ResultSet rs = con.getData("SELECT u_id, CONCAT ('Dr. ', u_fname, ' ', u_lname) AS doctor_name FROM user WHERE type = 'Doctor'  AND specialty = '" + specialty + "'");

            doctorMap = new HashMap<>();

            while (rs.next()) {

                int doctorId = rs.getInt("u_id");
                String doctorName = rs.getString("doctor_name");
                System.out.println("Found doctor: " + doctorName + " (ID: " + doctorId + ")");

                doctorComboBox.addItem(doctorName);

                doctorMap.put(doctorName, doctorId);

            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error fetching doctor data: " + e.getMessage());
        }

    }


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        LocalDate actionDate = LocalDate.now();
        LocalTime atime = LocalTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
        String actionTime = atime.format(formatter);

        if (signUpValidation()) {

            connectDB conn = new connectDB();
            session sess = session.getInstance();

            String doctor = (String) doctorComboBox.getSelectedItem();

            int doctorId = doctorMap.get(doctor);

            conn.insertData("INSERT INTO appointments (doctor_id, date, time, notes, patient_id, appointment_status)"
                    + "VALUES ('" + doctorId + "', '" + date.getText() + "', '" + time.getText() + "',"
                    + " '" + jTextField1.getText() + "', '" + sess.getU_id() + "', 'Pending')");

            this.dispose();

            patientAppointments app = new patientAppointments();
            app.getDataCounts();
            app.noData();
            app.displayData();

            conn.insertData("INSERT INTO logs (u_id, action, action_date, action_time)"
                    + "VALUES ('" + sess.getU_id() + "', 'Made an appointment', '" + actionDate + "', '" + actionTime + "')");

        } else {
            JOptionPane.showMessageDialog(this, "Submit error. Please fill all required field.", "Warning", JOptionPane.WARNING_MESSAGE);
        }


    }//GEN-LAST:event_jButton2ActionPerformed

    private void doctorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doctorComboBoxActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void doctorComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_doctorComboBoxFocusLost

        if (doctorComboBox.getSelectedIndex() == 0) {
            doctorComboBox.setForeground(Color.RED);
            doctorError.setText("Please choose a Doctor");
            doctorError.setForeground(Color.RED);
        } else {
            doctorComboBox.setForeground(Color.BLACK);
            doctorError.setText("");
        }

        doctorComboBox.repaint();


    }//GEN-LAST:event_doctorComboBoxFocusLost

    private void dateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dateFocusLost

        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy/MM/dd");

        if (date.getText().trim().isEmpty()) {
            date.setForeground(Color.RED);
            dateError.setText("Please set a valid date");
            dateError.setForeground(Color.RED);
        } else {
            try {

                LocalDate inputDate = LocalDate.parse(date.getText().trim(), dateFormatter);
                LocalDate today = LocalDate.now();

                if (inputDate.isBefore(today)) {
                    date.setForeground(Color.RED);
                    dateError.setText("Date cannot be in the past");
                    dateError.setForeground(Color.RED);
                } else {
                    date.setForeground(Color.BLACK);
                    dateError.setText("");
                    dateError.setForeground(Color.BLACK);
                }

            } catch (DateTimeParseException ex) {
                date.setForeground(Color.RED);
                dateError.setText("Invalid date format. Use YYYY/MM/DD");
                dateError.setForeground(Color.RED);
                System.out.println("" + ex);
            }
        }

        date.repaint();

    }//GEN-LAST:event_dateFocusLost

    private void timeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_timeFocusLost

        if (time.getText().trim().isEmpty()) {
            time.setForeground(Color.RED);
            timeError.setText("Please set a valid time");
            timeError.setForeground(Color.RED);
        } else {
            try {
                LocalTime starting_time = LocalTime.of(9, 0);
                LocalTime end_time = LocalTime.of(17, 0);
                LocalTime current_time = LocalTime.now();

                LocalTime inputTime = LocalTime.parse(time.getText().trim());

                if (inputTime.isBefore(starting_time) || inputTime.isAfter(end_time)) {
                    time.setForeground(Color.RED);
                    timeError.setText("Time must be between 9:00 and 17:00");
                    timeError.setForeground(Color.RED);
                } else if (inputTime.isBefore(current_time)) {

                    time.setForeground(Color.RED);
                    timeError.setText("Time should not be in the past");
                    timeError.setForeground(Color.RED);

                } else {
                    time.setForeground(Color.BLACK);
                    timeError.setText("");
                    timeError.setForeground(Color.BLACK);
                }
            } catch (DateTimeParseException ex) {
                time.setForeground(Color.RED);
                timeError.setText("Invalid time format. Use HH:mm.");
                timeError.setForeground(Color.RED);
                System.out.println("" + ex);
            }

        }

        time.repaint();


    }//GEN-LAST:event_timeFocusLost

    private void specialtyComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_specialtyComboBoxFocusLost
        if (specialtyComboBox.getSelectedIndex() == 0) {
            specialtyComboBox.setForeground(Color.RED);
            specialtyError.setText("Please choose a Doctor");
            specialtyError.setForeground(Color.RED);
        } else {
            specialtyComboBox.setForeground(Color.BLACK);
            specialtyError.setText("");
        }

        specialtyComboBox.repaint();
    }//GEN-LAST:event_specialtyComboBoxFocusLost

    private void specialtyComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_specialtyComboBoxActionPerformed

        connectDB con = new connectDB();

        String specialty = (String) specialtyComboBox.getSelectedItem();

        try {

            ResultSet rs = con.getData("SELECT u_id, CONCAT ('Dr. ', u_fname, ' ', u_lname) AS doctor_name FROM user WHERE type = 'Doctor'  AND specialty = '" + specialty + "'");

            doctorMap = new HashMap<>();

            while (rs.next()) {

                int doctorId = rs.getInt("u_id");
                String doctorName = rs.getString("doctor_name");
                System.out.println("Found doctor: " + doctorName + " (ID: " + doctorId + ")");

                doctorComboBox.addItem(doctorName);

                doctorMap.put(doctorName, doctorId);

            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error fetching doctor data: " + e.getMessage());
        }


    }//GEN-LAST:event_specialtyComboBoxActionPerformed

    public boolean signUpValidation() {

        boolean valid = true;

        if (doctorComboBox.getSelectedIndex() == 0) {
            doctorComboBox.setForeground(Color.RED);
            doctorError.setText("Please choose a Doctor");
            doctorComboBox.setForeground(Color.RED);
            valid = false;
        } else {
            doctorComboBox.setForeground(Color.BLACK);
            doctorError.setText("");
        }

        doctorComboBox.repaint();

        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy/MM/dd");

        if (date.getText().trim().isEmpty()) {
            date.setForeground(Color.RED);
            dateError.setText("Please set a valid date");
            dateError.setForeground(Color.RED);
            valid = false;
        } else {
            try {

                LocalDate inputDate = LocalDate.parse(date.getText().trim(), dateFormatter);
                LocalDate today = LocalDate.now();

                if (inputDate.isBefore(today)) {
                    date.setForeground(Color.RED);
                    dateError.setText("Date cannot be in the past");
                    dateError.setForeground(Color.RED);
                    valid = false;
                } else {
                    date.setForeground(Color.BLACK);
                    dateError.setText("");
                    dateError.setForeground(Color.BLACK);
                }

            } catch (DateTimeParseException ex) {
                date.setForeground(Color.RED);
                dateError.setText("Invalid date format. Use YYYY/MM/DD");
                dateError.setForeground(Color.RED);
                System.out.println("" + ex);
                valid = false;
            }
        }

        date.repaint();

        if (time.getText().trim().isEmpty()) {
            time.setForeground(Color.RED);
            timeError.setText("Please set a valid time");
            timeError.setForeground(Color.RED);
            valid = false;
        } else {
            try {
                LocalTime starting_time = LocalTime.of(9, 0);
                LocalTime end_time = LocalTime.of(17, 0);
                LocalTime current_time = LocalTime.now();

                LocalTime inputTime = LocalTime.parse(time.getText().trim());

                if (inputTime.isBefore(starting_time) || inputTime.isAfter(end_time)) {
                    time.setForeground(Color.RED);
                    timeError.setText("Time must be between 9:00 and 17:00");
                    timeError.setForeground(Color.RED);
                    valid = false;
                } else if (inputTime.isBefore(current_time)) {
                    time.setForeground(Color.RED);
                    timeError.setText("Time must not be in the past");
                    timeError.setForeground(Color.RED);
                    valid = false;
                } else {
                    time.setForeground(Color.BLACK);
                    timeError.setText("");
                    timeError.setForeground(Color.BLACK);
                }
            } catch (DateTimeParseException ex) {
                time.setForeground(Color.RED);
                timeError.setText("Invalid time format. Use HH:mm.");
                timeError.setForeground(Color.RED);
                System.out.println("" + ex);
                valid = false;
            }

        }

        time.repaint();

        if (specialtyComboBox.getSelectedIndex() == 0) {
            specialtyComboBox.setForeground(Color.RED);
            specialtyError.setText("Please choose a Doctor");
            specialtyError.setForeground(Color.RED);
            valid = false;
        } else {
            specialtyComboBox.setForeground(Color.BLACK);
            specialtyError.setText("");
        }

        specialtyComboBox.repaint();

        return valid;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(appointmentForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(appointmentForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(appointmentForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(appointmentForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new appointmentForm().setVisible(true);

            }
        });
    }

    private HashMap<String, Integer> doctorMap;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField date;
    private javax.swing.JLabel dateError;
    private javax.swing.JComboBox<String> doctorComboBox;
    private javax.swing.JLabel doctorError;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JComboBox<String> specialtyComboBox;
    private javax.swing.JLabel specialtyError;
    private javax.swing.JLabel symptomsError;
    private javax.swing.JTextField time;
    private javax.swing.JLabel timeError;
    // End of variables declaration//GEN-END:variables
}
