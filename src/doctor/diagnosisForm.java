/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package doctor;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import config.connectDB;
import config.session;
import gfx.GradientPanel;
import gfx.RoundGradientButton;
import gfx.RoundedPanel;
import gfx.RoundedTextField;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

public class diagnosisForm extends javax.swing.JFrame {

    private String appointmentId;

    public diagnosisForm(String appointmentId, String pname, String pnotes) {
        initComponents();

        this.appointmentId = appointmentId;

        appointment_id.setText("Appointment ID: " + appointmentId);
        name.setText("Patient Name: " + pname);
        p_notes.setText("Patient Notes: " + pnotes);

        try {

            connectDB conn = new connectDB();

            ResultSet rs = conn.getData("SELECT patient_id FROM appointments WHERE appointment_id = '" + appointmentId + "'");

            if (rs.next()) {
                String pid = rs.getString("patient_id");
                patient_id.setText("Patient ID: " + pid);
            }

        } catch (SQLException e) {
            System.out.println("" + e);
        }

        getPatientPfp(appointmentId);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new GradientPanel(new Color(250,249, 246), new Color(227, 249, 246), 1);
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new RoundGradientButton("Sign Up", new Color(131, 164, 212), new Color(182, 251, 255), 35);
        jLabel8 = new javax.swing.JLabel();
        diagnosis = new RoundedTextField(15);
        jLabel6 = new javax.swing.JLabel();
        diagnosisError = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        notes = new RoundedTextField(15);
        symptomsError1 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        pfp = new javax.swing.JLabel();
        appointment_id = new javax.swing.JLabel();
        name = new javax.swing.JLabel();
        patient_id = new javax.swing.JLabel();
        p_notes = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel2 = new RoundedPanel(20);
        jPanel2.setBackground(new java.awt.Color(250, 249, 246));
        jPanel2.setForeground(new java.awt.Color(50, 49, 204));
        jPanel2.setMinimumSize(new java.awt.Dimension(326, 344));
        jPanel2.setPreferredSize(new java.awt.Dimension(460, 480));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 26)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Patient Information");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 40, 250, 40));

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        jButton2.setForeground(new java.awt.Color(250, 249, 246));
        jButton2.setText("Submit");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 510, 150, 50));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/close.png"))); // NOI18N
        jLabel8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 40, 30, 30));

        diagnosis.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                diagnosisFocusLost(evt);
            }
        });
        diagnosis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diagnosisActionPerformed(evt);
            }
        });
        jPanel2.add(diagnosis, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 140, 330, 90));

        jLabel6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel6.setText("Diagnosis:");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 120, 200, 20));
        jPanel2.add(diagnosisError, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 230, 200, 20));

        jLabel2.setFont(new java.awt.Font("Segoe UI Semibold", 1, 26)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Diagnosis Form");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, 230, 40));

        notes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notesActionPerformed(evt);
            }
        });
        jPanel2.add(notes, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 330, 330, 100));
        jPanel2.add(symptomsError1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 430, 200, 20));

        jLabel12.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel12.setText("Additional notes: ");
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 310, 200, 20));
        jPanel2.add(pfp, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 100, 150, 130));

        appointment_id.setText("app id");
        jPanel2.add(appointment_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 250, 280, 30));

        name.setText("name");
        jPanel2.add(name, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 320, 260, 30));

        patient_id.setText("patient_id");
        jPanel2.add(patient_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 280, 280, 30));

        p_notes.setText("patient notes");
        jPanel2.add(p_notes, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 360, 260, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 903, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 903, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 602, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void getPatientPfp(String appointmentId) {

        connectDB conn = new connectDB();

        try {

            ResultSet rs = conn.getData(
                    "SELECT u.u_pfp FROM appointments a "
                    + "JOIN user u ON a.patient_id = u.u_id "
                    + "WHERE a.appointment_id = '" + appointmentId + "'"
            );

            if (rs.next()) {
                String pfpPath = rs.getString("u_pfp");

                if (pfpPath == null || pfpPath.trim().isEmpty()) {

                    String blankPfpPath = "src/img/blankpfp.jpg";

                    pfp.setIcon(ResizeImage(blankPfpPath, null, pfp));

                } else {

                    pfp.setIcon(ResizeImage(pfpPath, null, pfp));
                    oldpath = pfpPath;
                    path = pfpPath;
                    destination = pfpPath;

                }

            }

        } catch (SQLException e) {

            System.out.println("" + e);

        }

    }

    public String destination = "";
    File selectedFile;
    public String oldpath = "";
    public String path = "";

    public int FileExistenceChecker(String path) {
        File file = new File(path);
        String fileName = file.getName();

        Path filePath = Paths.get("src/user_img", fileName);
        boolean fileExists = Files.exists(filePath);

        if (fileExists) {
            return 1;
        } else {
            return 0;
        }

    }


    private void diagnosisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diagnosisActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_diagnosisActionPerformed

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked

        this.dispose();
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        LocalDate actionDate = LocalDate.now();
        LocalTime atime = LocalTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
        String actionTime = atime.format(formatter);

        connectDB conn = new connectDB();
        session sess = session.getInstance();

        String pid = "";

        try {

            ResultSet rs = conn.getData("SELECT patient_id FROM appointments WHERE appointment_id = '" + appointmentId + "'");

            if (rs.next()) {
                pid = rs.getString("patient_id");

            }

        } catch (SQLException e) {
            System.out.println("" + e);
        }

        if (signUpValidation()) {

            conn.insertData("INSERT INTO diagnosis (appointment_id, doctor, patient_id, d_diagnosis, notes, diagnosis_date, diagnosis_time)"
                    + "VALUES ('" + appointmentId + "', '" + sess.getU_id() + "', '"+pid+"', '"+diagnosis.getText()+"', '"+notes.getText()+"', '"+actionDate+"', '"+atime+"')");
            

            conn.insertData("INSERT INTO logs (u_id, action, action_date, action_time)"
                    + "VALUES ('" + sess.getU_id() + "', 'Made a diagnosis', '" + actionDate + "', '" + actionTime + "')");
            
            this.dispose();
            

        } else {
            JOptionPane.showMessageDialog(this, "Submit error. Please fill all required field.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void notesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_notesActionPerformed

    private void diagnosisFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_diagnosisFocusLost

        if (diagnosis.getText().isEmpty()) {

            diagnosis.setForeground(Color.RED);
            diagnosisError.setText("Diagnosis is required");
            diagnosisError.setForeground(Color.RED);

        } else {
            diagnosis.setForeground(Color.BLACK);
            diagnosisError.setText("");
            diagnosisError.setForeground(Color.BLACK);
        }

        diagnosis.repaint();


    }//GEN-LAST:event_diagnosisFocusLost

    public boolean signUpValidation() {

        boolean valid = true;

        if (diagnosis.getText().isEmpty()) {

            diagnosis.setForeground(Color.RED);
            diagnosisError.setText("Diagnosis is required");
            diagnosisError.setForeground(Color.RED);

            valid = false;

        } else {
            diagnosis.setForeground(Color.BLACK);
            diagnosisError.setText("");
            diagnosisError.setForeground(Color.BLACK);
        }

        diagnosis.repaint();

        return valid;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(diagnosisForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(diagnosisForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(diagnosisForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(diagnosisForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                String appointmentId = null;
                String pname = null;
                String pnotes = null;

                new diagnosisForm(appointmentId, pname, pnotes).setVisible(true);

            }
        });
    }

    public ImageIcon ResizeImage(String ImagePath, byte[] pic, JLabel label) {
        try {
            BufferedImage originalImage;
            if (ImagePath != null) {
                originalImage = ImageIO.read(new File(ImagePath));
            } else {
                originalImage = ImageIO.read(new ByteArrayInputStream(pic));
            }

            int diameter = Math.min(label.getWidth(), label.getHeight());
            BufferedImage masked = new BufferedImage(diameter, diameter, BufferedImage.TYPE_INT_ARGB);

            Graphics2D g2 = masked.createGraphics();
            g2.setClip(new java.awt.geom.Ellipse2D.Float(0, 0, diameter, diameter));
            g2.drawImage(originalImage, 0, 0, diameter, diameter, null);
            g2.dispose();

            return new ImageIcon(masked);
        } catch (IOException e) {
            System.out.println("Image Load Error: " + e.getMessage());
            return null;
        }
    }

    public static int getHeightFromWidth(String imagePath, int desiredWidth) {
        try {
            // Read the image file
            File imageFile = new File(imagePath);
            BufferedImage image = ImageIO.read(imageFile);

            // Get the original width and height of the image
            int originalWidth = image.getWidth();
            int originalHeight = image.getHeight();

            // Calculate the new height based on the desired width and the aspect ratio
            int newHeight = (int) ((double) desiredWidth / originalWidth * originalHeight);

            return newHeight;
        } catch (IOException ex) {
            System.out.println("No image found!");
        }

        return -1;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel appointment_id;
    private javax.swing.JTextField diagnosis;
    private javax.swing.JLabel diagnosisError;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel name;
    private javax.swing.JTextField notes;
    private javax.swing.JLabel p_notes;
    private javax.swing.JLabel patient_id;
    private javax.swing.JLabel pfp;
    private javax.swing.JLabel symptomsError1;
    // End of variables declaration//GEN-END:variables
}
